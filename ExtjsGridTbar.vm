Ext.define('${PROJECT_NAME}.view.grid.tbar.base.GridTbar', {
    extend: 'Ext.toolbar.Toolbar',
    requires: ['Ext.form.Label'],
    xtype: 'gridtbar',
    id: 'gridtbar',
    items: [{
        xtype: 'button',
        text: 'Sync',
        handler: function (thisObj) {
            thisObj.findParentByType("grid").getStore().sync();
        }
    }, {
        xtype: 'button',
        text: 'Add',
        handler: function (thisObj) {
            let gridStore = thisObj.findParentByType("grid").getStore();
            let storeModelClass = gridStore.getModel();
            let objTmp = {};
            objTmp[storeModelClass.idProperty] = '0';
            let storeModel = new storeModelClass(objTmp);
            gridStore.add(storeModel);
        }
    }, {
        xtype: 'button',
        text: 'Del',
        handler: function (thisObj) {
            let grid = thisObj.findParentByType("grid");
            let gridStore = grid.getStore();
            let selection = grid.getSelection();
            if (selection.length === 1) {
                gridStore.remove(selection[0])
                gridStore.sync();
            }
            //grid.getStore().removeAt(rowIndex);
        }
    }
    ]
})
;